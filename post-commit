#!/bin/bash

unset GIT_DIR

DWL_URL="https://github.com/taishingi/continuous-template"
RELEASE="0.0.5"
SUM="b54e5a4a153fe9aac4bc2482c53260c5d7f23b6e551156a67588563be737c513  ${RELEASE}"
DIR=$(realpath .)
BRANCHES=('master')
REMOTES=('origin')
PROVIDER=""
USERNAME=""
REPOSITORY=""
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

function set_project()
{
    l=""
    while [ -z $l ]
    do
        echo -e -n "${Blue}Please enter your language ${White}[${Blue}d${White}|${Blue}rust${White}|${Blue}go${White}|${Blue}custom${White}] : "
        read l
        case "$l" in
            go)
                module=""
                version=""
                while [ -z "${module}" ]
                do
                    echo -e -n "${Blue}Please enter the${White} name of the module : "
                    read module
                done
                while [ -z "${version}" ]
                do
                    echo -e -n "${Blue}Please enter the${White} module version : "
                    read version
                    case "${version}" in
                        "v0|v1")
                            module="${module}/m"
                            version="${version}"
                        ;;
                        "v2")
                            module="${module}/m/v2"
                            version="${version}"
                        ;;
                        *)
                            version=""
                        ;;
                    esac
                done
                
                go mod init "${module}" || exit 1
                ask
            ;;
            "custom")
                cmd=""
                while [ -z "${cmd}" ]
                do
                    echo -e -n "${Blue}Please enter the${White} command line to init the project : "
                    read cmd
                done
                `$cmd` && echo -e  "${White}[ ${Green}OK${White} ] success${Reset}" || set_project
                ask
            ;;
            rust)
                name=""
                project=""
                while [ -z "${name}" ]
                do
                    echo -e -n "${Blue}Please enter the${White} name of the project : "
                    read name
                    if [ -d "$name" ]
                    then
                        echo -e "${Red} The directory already exist take an another name${Reset}"
                        name=""
                    fi
                done
                
                while [ -z "${project}" ]
                do
                    echo -e -n "${Blue}Project is a ${White}program project [${Blue}y${White}|${Blue}Y${White}|${Blue}n${White}|${Blue}N${White}] : "
                    read project
                    case "${project}" in
                        "Y|y")
                            project="--bin"
                        ;;
                        "N|n")
                            project="--lib"
                        ;;
                        *)
                            project=""
                        ;;
                    esac
                done
                cargo new "${project}" --name "${name}" || exit 1
                ask
            ;;
            d)
                dub init . || exit 1
                ask
            ;;
        esac
    done
}
function ask()
{
    files=$(ls .)
    if [ -z "${files}" ]
    then
        set_project
    else
        PROVIDER=""
        USERNAME=""
        REPOSITORY=""
        
        while [ -z "${PROVIDER}" ]
        do
            echo -e -n "${Blue}Please enter your provider ${White}[${Blue}github.com${White}|${Blue}gitlab.com${White}|${Blue}bitbucket.org${White}] : "
            read -r PROVIDER
        done
        
        echo -e "${Yellow}Checking provider...${Reset}"
        
        case ${PROVIDER} in
            "github.com"|"gitlab.com"|"bitbucket.org")
                echo -e "${White}[ ${Green}OK${White} ] ${BWhite}${PROVIDER}${Reset}"
            ;;
            
            *)
                ask
            ;;
        esac
        while [ -z "${USERNAME}" ]
        do
            echo -e -n "${Blue}Enter your ${BIWhite}username${White} : "
            read -r USERNAME
            
        done
        
        while [ -z "${REPOSITORY}" ]
        do
            echo -e -n "${Blue}Enter the name of your${BIWhite} repository${White} : "
            read -r REPOSITORY
        done
        
        URL="https://${PROVIDER}/${USERNAME}/${REPOSITORY}"
        
        if wget --spider "${URL}" 2>/dev/null
        then
            if [ -f "dub.json" ]
            then
                cd continuous/d || exit 1
                ./scripts-gen "${PROVIDER}" "${USERNAME}" "${REPOSITORY}" || exit 1
            elif [ -f "Cargo.toml" ]
            then
                cd continuous/rust || exit 1
                ./scripts-gen "${PROVIDER}" "${USERNAME}" "${REPOSITORY}" || exit 1
            elif [ -f "go.mod" ]
            then
                cd continuous/go || exit 1
                ./scripts-gen "${PROVIDER}" "${USERNAME}" "${REPOSITORY}" || exit 1
            else
                set_project
                ask
            fi
            echo -e -n "${Reset}"
            exit 0
        else
            echo -e "${BRed}Repository are not founded please check if exists at ${White}${URL}${Reset}"
            ask
        fi
    fi
}

function download() {
    
    if [ -d ".repo" ]
    then
        rm -rf .repo
    fi
    
    git clone --quiet ${DWL_URL} .repo && cd .repo  && git fetch --all --tags  && git checkout -b "${USER}" ${RELEASE} && git range-diff 0.0.4...0.0.5 && cd .. || exit 1
    
    if [ -d "./continuous" ]
    then
        rm -rf ./continuous
    fi
    mv .repo continuous
}

function main() {
    
    files=$(ls .)
    if [ -z "${files}" ]
    then
        set_project
    fi
    
    if [ -d "continuous" ]
    then
        if [ -f "Cargo.toml" ]
        then
            send
            cd continuous/rust || exit 1
            packer validate . || exit 1
            packer build . || exit 1
            exit 0
        elif [ -f "dub.json" ]
        then
            send
            cd continuous/d || exit 1
            packer validate . || exit 1
            packer build . || exit 1
            exit 0
        elif [ -f "go.mod" ]
        then
            send
            cd continuous/go || exit 1
            packer validate . || exit 1
            packer build . || exit 1
            exit 0
        else
            set_project
        fi
    fi
    download || exit 1
    ask
    exit 0
}

function send()
{
    if [ -d "${DIR}/continuous" ];then
        
        for r in "${REMOTES[@]}";do
            for b in "${BRANCHES[@]}";do
                git push "${r}" "${b}"
                git push "${r}" --tags
            done
        done
    fi
}

main
